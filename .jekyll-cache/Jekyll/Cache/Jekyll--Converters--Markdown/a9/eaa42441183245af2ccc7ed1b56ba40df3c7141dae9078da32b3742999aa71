I"™<!--##Table of Contents
###[Sparse Checkout](#sparse-checkout)
###[SVN Checkout](#svn-checkout)
## Directory && Sub-directory checkout from git repos-->

<p>This is a relatively newie but a goodie.  Have you ever been stuck trying to clone specific folders from a <code class="language-plaintext highlighter-rouge">git</code> repo recently?</p>

<p>Well, starting from <code class="language-plaintext highlighter-rouge">git 1.9</code>, this feature is now part of git features. For the sake of illustration, let‚Äôs say we want to retrieve only the <a href="https://github.com/PointCloudLibrary/pcl/tree/master/examples">examples</a> directory of the point cloud repo commited at the <a href="https://github.com/PointCloudLibrary">point cloud library git page</a>.</p>

<h3 id="sparse-checkout">Sparse-Checkout</h3>
<p>A new feature called <a href="https://git-scm.com/docs/git-read-tree/">sparse checkout</a> allows us to sparsely populate the working directory by using skip-worktree bit to inform <code class="language-plaintext highlighter-rouge">GIT</code> if the file in the working directory deserves a look. <i>git read-tree</i> and other merge commands native to <code class="language-plaintext highlighter-rouge">git</code> such as <code class="language-plaintext highlighter-rouge">checkout</code>, <code class="language-plaintext highlighter-rouge">merge</code>, or <code class="language-plaintext highlighter-rouge">pull</code> are useful in maintaining the skip-working tree bitmap and working directory update.</p>

<p>A paraphrased quote from the manual here:</p>

<p>‚Äù<code class="language-plaintext highlighter-rouge">$GIT_DIR/info/sparse-checkout</code> defines the skip-worktree reference bitmap. When git read-tree needs to update the working directory, it resets the skip-worktree bit in the index based on this file, which uses the same syntax as .gitignore files. If an entry matches a pattern in this file, skip-worktree will not be set on that entry. Otherwise, skip-worktree will be set.</p>

<p>Then it compares the new skip-worktree value with the previous one. If skip-worktree turns from set to unset, it will add the corresponding file back. If it turns from unset to set, that file will be removed.</p>

<p>While <code class="language-plaintext highlighter-rouge">$GIT_DIR/info/sparse-checkout</code> is usually used to specify what files are in, you can also specify what files are not in, using negate patterns. For example, to remove the file unwanted:</p>

<p>Another tricky thing is fully repopulating the working directory when you no longer want sparse checkout. You cannot just disable ‚Äúsparse checkout‚Äù because skip-worktree bits are still in the index and your working directory is still sparsely populated. You should re-populate the working directory with the $GIT_DIR/info/sparse-checkout file content as follows:</p>

<p>So to check out the pcl examples directory for example, we could combine the <code class="language-plaintext highlighter-rouge">sparse checkout</code> and <code class="language-plaintext highlighter-rouge">shallow clone</code> features. By using the <code class="language-plaintext highlighter-rouge">shallow clone</code> feature, we cut off the history and the <code class="language-plaintext highlighter-rouge">sparse check out</code> only pulls files matching the pattern(s) we specify.</p>

<p>Take a look at the following example:</p>
<pre class="terminal"><code>
$ mkdir pcl-examples
$ cd pcl-examples								#make a directory we want to copy folders to
$ git init                            			#initialize the empty local repo
$ git remote add origin -f https://github.com/PointCloudLibrary/pcl.git     #add the remote origin
$ git config core.sparsecheckout true			#very crucial. this is where we tell git we are checking out specifics
$ echo "examples/*" &gt;&gt; .git/info/sparse-checkout #recursively checkout examples folder
$ git pull --depth=2 origin master			#go only 2 depths down the examples directory
</code></pre>

<h4 id="explanation">Explanation</h4>

<p>The line
                  &lt;pre class="terminal"&gt;<code>$git remote add origin -f https://github.com/PointCloudLibrary/pcl.git </code>&lt;/pre&gt;</p>

<p>adds a remote named <name> e.g. a repository given by <url>.</url></name></p>

<p>It does not create nor update remote working branches by any chance. We do that by adding the ‚Äú-f‚Äù or ‚Äú‚Äìfetch‚Äù argument to update all remote tracking branches in our index. Note that this merely updates the git index. The files nor folders are as yet not populated.</p>

<p>The files are updated in our <code class="language-plaintext highlighter-rouge">pcl-examples</code> directory with the next line‚Äôs command.</p>

<p>Since we are cloning everything in the examples directory ‚Äìwhich, by the way, have a depth of 2 ‚Äì we pull every subdirectory and file under the examples folder by doing:</p>

<pre class="terminal"><code>$ git pull --depth=2 origin master</code></pre>

<h3 id="svn-checkout">SVN Checkout</h3>

<p>If you are using <code class="language-plaintext highlighter-rouge">svn</code> instead of git, there is a straightforward way to do this. Simply cd into your working directory and replace the ‚Äú<code class="language-plaintext highlighter-rouge">/tree/master</code>‚Äù path within the <code class="language-plaintext highlighter-rouge">url</code> with <code class="language-plaintext highlighter-rouge">trunk</code>. To clone the subdirectory <code class="language-plaintext highlighter-rouge">examples</code> in the point cloud git repo for example, using <code class="language-plaintext highlighter-rouge">svn</code>, we would do the following in terminal</p>

<pre class="terminal"><code>$ svn checkout https://github.com/PointCloudLibrary/pcl/trunk/examples</code></pre>
:ET