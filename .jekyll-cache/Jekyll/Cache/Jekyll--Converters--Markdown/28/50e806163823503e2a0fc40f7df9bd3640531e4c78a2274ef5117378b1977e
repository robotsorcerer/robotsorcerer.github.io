I"<ul>
  <li><a href="#table-o-conts">Table of Contents</a></li>
  <li><a href="#intro">Introduction</a></li>
  <li><a href="#pullpush">Pulling/Pushing git remotes from LAN/WAN repos</a></li>
  <li><a href="#clone">Cloning git remotes from LAN/WAN repos</a></li>
</ul>

<p><a name="intro"></a></p>
<h3 id="introduction">Introduction</h3>

<p>Git is a useful tool for remote/online work collaboration, as well as social coding. It is useful being able to share oneâ€™s work among different computers using native git commands such as <code class="language-plaintext highlighter-rouge">merge</code>, <code class="language-plaintext highlighter-rouge">fetch</code>, <code class="language-plaintext highlighter-rouge">push</code>, <code class="language-plaintext highlighter-rouge">clone</code>, or <code class="language-plaintext highlighter-rouge">pull</code> without resolving to using <code class="language-plaintext highlighter-rouge">ssh</code>, or <code class="language-plaintext highlighter-rouge">scp</code> which are without the benefits of <code class="language-plaintext highlighter-rouge">diff</code> and <code class="language-plaintext highlighter-rouge">merge</code> strategies of <code class="language-plaintext highlighter-rouge">git</code>. More so, not everyone enjoys exposing their incomplete work/code to a remote repo for the sake of fetching to local <code class="language-plaintext highlighter-rouge">origins</code> on different computers. This post is meant to show how to go about these git ops strategies without going through a remote e.g. an http[s] server.</p>

<p><a name="pullpush"></a></p>
<h4 id="pullingpushing-git-remotes-from-a-lanwan-repo">Pulling/Pushing git remotes from a LAN/WAN repo</h4>

<p>As an example, suppose we have a repo named <code class="language-plaintext highlighter-rouge">sensors</code> in the <code class="language-plaintext highlighter-rouge">Documents</code> directory of a computer with username and group name <code class="language-plaintext highlighter-rouge">drumpf@dissembler</code> and we have a few commits ahead of a tracking repo on a computer named <code class="language-plaintext highlighter-rouge">robots@killem</code>, we can fetch and merge our recent commits on <code class="language-plaintext highlighter-rouge">drumpf@dissembler</code> into <code class="language-plaintext highlighter-rouge">robots@killem</code> as follows:</p>

<p>We could use <code class="language-plaintext highlighter-rouge">ssh</code>, <code class="language-plaintext highlighter-rouge">http[s]</code>, <code class="language-plaintext highlighter-rouge">ftp[s]</code> or <code class="language-plaintext highlighter-rouge">rsync</code> transport protocols. To pull updates from <code class="language-plaintext highlighter-rouge">drump@dissembler:~/Documents/sensors.git</code> to <code class="language-plaintext highlighter-rouge">robots@killem:~/Documents/sensors.git</code> repo, we would do one of the following:</p>

<ul>
  <li>
    <p>via ssh:</p>

    <pre class="terminal"><code>robots@killem:~/Documents/sensors$ git pull ssh://drumpf@dissembler:/~/Documents/sensors.git</code></pre>
  </li>
  <li>
    <p>via https:</p>

    <pre class="terminal"><code>robots@killem:~/Documents/sensors$ git pull http[s]://drumpf@dissembler:/robots/killem/Documents/sensors.git</code></pre>
  </li>
  <li>
    <p>via ftp</p>

    <pre class="terminal"><code>robots@killem:/home/drumpf/Documents/sensors$ git pull ftp[s]://drumpf@dissembler:/robots/killem/Documents/sensors.git</code></pre>
  </li>
  <li>
    <p>via rsync</p>

    <pre class="terminal"><code>robots@killem:/home/drumpf/Documents/sensors$ git pull rsync://drumpf@dissembler:/~/Documents/sensors.git</code></pre>
  </li>
</ul>

<p>Note that we have used user expansion for both <code class="language-plaintext highlighter-rouge">ssh</code> and <code class="language-plaintext highlighter-rouge">git</code>. <code class="language-plaintext highlighter-rouge">ftp[s]</code> and <code class="language-plaintext highlighter-rouge">rsync</code> do not allow user expansion when pulling, pushing or cloning, so the full path to the repo has to be specified.
The <code class="language-plaintext highlighter-rouge">https</code> syntax has no authentication and can be dangerous on unsecured networks. If the group names of the computers are not advertised by <code class="language-plaintext highlighter-rouge">/etc/hosts</code>, you can use the ip address of the computer in place of the host names. Note that <code class="language-plaintext highlighter-rouge">ftp[s]</code> can be used for fetching while <code class="language-plaintext highlighter-rouge">rsync</code> can be used for both fetching and pushing. Both are not very efficient, however, and they are actually deprecated; so you should refrain from using them as much as you can.</p>

<p>All the commands above would also work for <code class="language-plaintext highlighter-rouge">git push</code>.</p>

<p><strong>SCP-like syntaxes are valid as well:</strong></p>

<pre class="terminal"><code>scp [user@]host.ng:path/to/repo.git/</code></pre>

<p>but note that the first character after the first column must not be a slash to help distinguish a local path from an ssh url</p>

<p>All of the above commands also support cloning <code class="language-plaintext highlighter-rouge">git</code> repos from one directory to another on the same host or between workstations on the same <code class="language-plaintext highlighter-rouge">LAN/WAN</code>. All that would need to change would be to replace the <code class="language-plaintext highlighter-rouge">LAN/WAN</code> hostname with the path we are cloning from. See examples below:</p>

<p><a name="clone"></a></p>
<h4 id="cloning-git-remotes-from-a-lanwan-repo">Cloning git remotes from a LAN/WAN repo</h4>

<p>The procedure is the same as above save we replace pull/push with clone, e.g</p>

<ul>
  <li>
    <pre class="terminal"><code>git clone ssh://[you@]remote.ng[:port]/path/to/repo.git/</code></pre>
  </li>
  <li>
    <pre class="terminal"><code>git clone  git://remote.ng[:port]/path/to/repo.git/</code></pre>
  </li>
  <li>
    <pre class="terminal"><code>git clone  http[s]://remote.ng[:port]/path/to/repo.git/</code></pre>
  </li>
  <li>
    <pre class="terminal"><code>git clone  ftp[s]://remote.ng[:port]/path/to/repo.git/</code></pre>
  </li>
  <li>
    <pre class="terminal"><code>git clone rsync://remote.ng/path/to/repo.git/</code></pre>
  </li>
</ul>

<p>If when doing any of the operations specified so far, the transport protocol is not specified, no problem! Git assumes a remote url transport protocol if it does not know what the remote address is. So we could for example do</p>

<pre class="terminal"><code>robots@killem:~/Documents/sensors$ git push transport::address</code></pre>

<p>where <code class="language-plaintext highlighter-rouge">address</code> is the path to the repo on the LAN/WAN and transport is replaced by <code class="language-plaintext highlighter-rouge">https</code>.</p>

<p>An alternative scp-like syntax is also valid when using the ssh protocol:</p>

<ul>
  <li>
    <pre class="terminal"><code>git clone [you@]remote.ng:path/to/repo.git/</code></pre>
  </li>
</ul>

<p>Just as is the case for <code class="language-plaintext highlighter-rouge">pull/push</code>, <code class="language-plaintext highlighter-rouge">https</code> is not secure and should be used with caution.</p>
:ET